import { FieldIdType, FormDataCollectionType, FormFieldType, SupportedTypes, TFieldDisabled } from '../../types';
export declare const validateField: (fieldId: FieldIdType, value: SupportedTypes, formSchema: FormDataCollectionType, values: Record<string, any>, setErrors: (update: Record<string, string> | ((prev: Record<string, string>) => Record<string, string>)) => void, touchedFields?: Record<string, boolean>, // Add this parameter
forceValidate?: boolean) => void;
export declare const validateForm: (form: FormDataCollectionType, values: Record<string, SupportedTypes>, setErrors: (update: Record<string, string> | ((prev: Record<string, string>) => Record<string, string>)) => void, touchedFields?: Record<string, boolean>, forceValidateAll?: boolean) => boolean;
export declare const shouldShowField: (field: FormFieldType, values: Record<string, any>) => boolean;
export declare const isDisableField: (field: FormFieldType, values?: Record<string, SupportedTypes>, formSchema?: FormDataCollectionType) => TFieldDisabled;
