import { u as F, j as e, D as V, a as L, F as O, d as N } from "./index-DN8rpHta.js";
import { useState as P, useEffect as S, useCallback as C, useMemo as T } from "react";
const E = (s) => {
  const { eventHandlers: m, fieldParams: t, fieldValue: a, isTouched: o } = F(s);
  return /* @__PURE__ */ e.jsx(
    "input",
    {
      ...t,
      ...m.htmlHandlers,
      value: a ?? "",
      "data-touched": o
    }
  );
}, _ = (s) => {
  const { eventHandlers: m, fieldParams: t, fieldValue: a, isTouched: o } = F(s);
  return /* @__PURE__ */ e.jsx(
    "input",
    {
      ...t,
      ...m.htmlHandlers,
      value: a || "",
      "data-touched": o
    }
  );
}, q = (s) => {
  const {
    eventHandlers: m,
    processedProps: t,
    fieldParams: a,
    fieldValue: o,
    fieldId: i,
    isTouched: n,
    setValue: x
  } = F(s), g = !t?.options, d = t?.layout || "column", r = (f) => {
    const v = f.target.checked ? "true" : "false";
    v === "true" ? x(i, t?.singlePositiveAnswerValue || v) : x(i, t?.singleNegativeAnswerValue || "");
  }, p = {
    display: "flex",
    flexDirection: d === "inline" ? "row" : "column",
    gap: d === "inline" ? "24px" : "8px",
    // More gap for inline, less for column
    flexWrap: "wrap",
    ...t?.containerStyles
  }, h = {
    display: "flex",
    alignItems: "center",
    gap: "4px",
    // Space between checkbox and label
    cursor: "pointer",
    ...t?.itemsStyles
  };
  return /* @__PURE__ */ e.jsx(
    "div",
    {
      "data-testid": a["data-testid"],
      "data-touched": n,
      style: p,
      children: g ? (
        // Single checkbox mode
        /* @__PURE__ */ e.jsxs(
          "label",
          {
            htmlFor: i,
            style: h,
            className: t?.itemsClassName,
            children: [
              /* @__PURE__ */ e.jsx(
                "input",
                {
                  ...a,
                  ...m.htmlHandlers,
                  id: i,
                  type: "checkbox",
                  checked: o === t?.singlePositiveAnswerValue || o === "true",
                  onChange: r
                }
              ),
              t?.description && /* @__PURE__ */ e.jsx("span", { children: t.description })
            ]
          }
        )
      ) : (
        // Multiple checkboxes mode
        t?.options?.map((f, v) => {
          const l = typeof f == "string", u = l ? f : f.value, c = l ? f : f.label;
          return /* @__PURE__ */ e.jsxs(
            "label",
            {
              htmlFor: `${i}-item-${u}`,
              style: h,
              className: t.itemsClassName,
              children: [
                /* @__PURE__ */ e.jsx(
                  "input",
                  {
                    ...a,
                    ...m.htmlHandlers,
                    id: `${i}-item-${u}`,
                    value: u,
                    checked: o?.includes(u) || !1
                  }
                ),
                /* @__PURE__ */ e.jsx("span", { children: c })
              ]
            },
            l ? f : `${f.value}-${v}`
          );
        })
      )
    }
  );
}, J = ({
  fieldId: s,
  as: m = "fieldset",
  label: t,
  fields: a,
  className: o = "",
  styles: i = {},
  legendClassName: n = "",
  legendStyles: x = {},
  ...g
}) => /* @__PURE__ */ e.jsxs(
  m,
  {
    id: s,
    "data-testid": "group-field",
    className: o,
    style: i,
    ...typeof g.disabled == "boolean" ? { disabled: g.disabled } : {},
    ...Object.fromEntries(
      Object.entries(g).filter(([d]) => d !== "disabled")
    ),
    children: [
      m === "fieldset" && /* @__PURE__ */ e.jsx("legend", { className: n, style: x, children: t }),
      a && a.map((d) => /* @__PURE__ */ e.jsx(V, { ...d }, d.fieldId))
    ]
  }
), K = (s) => {
  const {
    eventHandlers: m,
    processedProps: t,
    fieldParams: a,
    fieldValue: o,
    fieldId: i,
    dynamicOptions: n,
    isTouched: x
  } = F(s), [g, d] = P(
    t.options || []
  );
  return S(() => {
    n && n[i] && d(n[i]);
  }, [n, i]), S(() => {
    let r = n?.[i] || t.options || [];
    const p = typeof r[0] == "string" ? r.map((h) => ({ label: h, value: h })) : r;
    d(p);
  }, [n, i, t.options]), /* @__PURE__ */ e.jsxs(
    "select",
    {
      ...a,
      ...m.htmlHandlers,
      value: o || "",
      "data-touched": x,
      children: [
        /* @__PURE__ */ e.jsx("option", { value: "", disabled: !0, children: t.placeholder ? t.placeholder : "Select an option" }),
        g.map((r, p) => {
          const h = typeof r == "string", f = h ? r : r.value, v = h ? r : r.label;
          return /* @__PURE__ */ e.jsx(
            "option",
            {
              value: f,
              children: v
            },
            h ? r : `${r.value}-${p}`
          );
        })
      ]
    }
  );
}, Q = (s) => {
  const { eventHandlers: m, processedProps: t, fieldParams: a, fieldValue: o, isTouched: i } = F(s), n = t?.layout || "inline", x = {
    display: "flex",
    flexDirection: n === "inline" ? "row" : "column",
    gap: n === "inline" ? "24px" : "8px",
    // More gap for inline, less for column
    flexWrap: "wrap",
    ...t?.containerStyles
  }, g = {
    display: "flex",
    alignItems: "center",
    gap: "4px",
    // Space between checkbox and label
    cursor: "pointer",
    ...t?.itemsStyles
  };
  return /* @__PURE__ */ e.jsx(
    "div",
    {
      "data-testid": a["data-testid"],
      "data-touched": i,
      style: x,
      children: s.options?.map((d, r) => {
        const p = typeof d == "string", h = p ? d : d.value, f = p ? d : d.label;
        return /* @__PURE__ */ e.jsxs(
          "label",
          {
            style: g,
            className: t.itemsClassName,
            children: [
              /* @__PURE__ */ e.jsx(
                "input",
                {
                  ...a,
                  ...m.htmlHandlers,
                  ...p ? {} : d,
                  value: h,
                  checked: o === h
                }
              ),
              /* @__PURE__ */ e.jsx("span", { children: f })
            ]
          },
          p ? d : `${d.value}-${r}`
        );
      })
    }
  );
}, D = N.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 1rem;
`, G = N.div`
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 1rem;
  cursor: pointer;
  transition: background-color 0.2s ease;
  text-align: center;

  &:hover {
    background-color: #f9f9f9;
  }

  &.selected {
    background-color: #e0f2fe;
  }
`, M = N.img`
  width: 100%;
  height: 120px;
  object-fit: cover;
  border-radius: 6px;
  margin-bottom: 0.5rem;
`, W = N.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 1rem;
`, I = N.button`
  background-color: #eee;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  font-size: 0.875rem;
  cursor: pointer;
  &:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }
`, X = ({
  fieldId: s,
  label: m,
  required: t,
  className: a = "",
  styles: o = {},
  containerClassName: i = "",
  containerStyles: n = {},
  itemsClassName: x = "",
  itemsStyles: g = {}
}) => {
  const { values: d, setValue: r, dynamicOptions: p, fetchDynamicOptions: h, formSchema: f } = L(), [v, l] = P(1), [u, c] = P([]), [b, j] = P(!1), w = f.fields.find(
    (y) => y.fieldId === s
  ), k = w?.dynamicOptions?.pagination, R = k?.limit || 10, U = async () => {
    j(!0), await h(s, d, { page: v, limit: R }), c(p[s] || []), j(!1);
  };
  S(() => {
    w?.dynamicOptions?.fetchOnInit !== !1 && U();
  }, [v]), S(() => {
    c(p[s] || []);
  }, [p[s]]);
  const $ = (y) => {
    r(s, y.value);
  }, H = () => l((y) => y + 1), A = () => l((y) => Math.max(y - 1, 1));
  return /* @__PURE__ */ e.jsxs(
    O,
    {
      id: s,
      label: m,
      required: t,
      className: i,
      styles: n,
      children: [
        /* @__PURE__ */ e.jsx(D, { className: a, style: o, children: b ? /* @__PURE__ */ e.jsx("div", { style: { gridColumn: "1 / -1", textAlign: "center" }, children: "Loading..." }) : u.map((y) => /* @__PURE__ */ e.jsxs(
          G,
          {
            className: `${x} ${d[s] === y.value ? "selected" : ""}`,
            style: g,
            onClick: () => $(y),
            children: [
              y.image && /* @__PURE__ */ e.jsx(M, { src: y.image, alt: y.label }),
              /* @__PURE__ */ e.jsx("div", { className: "font-semibold", children: y.label }),
              y.price && /* @__PURE__ */ e.jsxs("div", { className: "text-sm text-gray-500", children: [
                "$",
                y.price
              ] })
            ]
          },
          y.value
        )) }),
        /* @__PURE__ */ e.jsxs(W, { children: [
          /* @__PURE__ */ e.jsx(I, { onClick: A, disabled: v <= 1 || b, children: "Previous" }),
          /* @__PURE__ */ e.jsxs("span", { className: "text-sm", children: [
            "Page ",
            v
          ] }),
          /* @__PURE__ */ e.jsx(
            I,
            {
              onClick: H,
              disabled: !!(b || k?.maxPage && v >= k.maxPage),
              children: "Next"
            }
          )
        ] })
      ]
    }
  );
}, Y = ({
  as: s = "div",
  fieldId: m,
  columns: t = 1,
  gap: a = 16,
  fields: o,
  containerStyles: i,
  containerClassName: n,
  styles: x,
  className: g,
  itemsStyles: d,
  itemsClassName: r,
  children: p,
  header: h,
  footer: f,
  itemsParentAttributes: v,
  ...l
}) => {
  const u = (c, b, j) => ({
    ...b,
    ...j,
    ...c && {
      gridColumn: `span ${c} / span ${c}`
    }
  });
  return /* @__PURE__ */ e.jsxs("div", { style: i, className: n, children: [
    h,
    /* @__PURE__ */ e.jsxs(
      s,
      {
        className: g,
        style: {
          display: "grid",
          gridTemplateColumns: `repeat(${t}, 1fr)`,
          gap: a,
          ...x
        },
        ...l,
        children: [
          o.map((c) => {
            const {
              colSpan: b,
              style: j,
              ...w
            } = v?.[c.fieldId] || {};
            return /* @__PURE__ */ e.jsx(
              "div",
              {
                className: r,
                style: u(b, d, j),
                ...w,
                children: /* @__PURE__ */ e.jsx(V, { ...c })
              },
              c.fieldId
            );
          }),
          p
        ]
      }
    ),
    f
  ] });
}, Z = (s) => {
  const { eventHandlers: m, fieldParams: t, fieldValue: a, isTouched: o } = F(s);
  return /* @__PURE__ */ e.jsx(
    "textarea",
    {
      ...t,
      ...m.htmlHandlers,
      value: a || "",
      "data-touched": o
    }
  );
}, ee = ({
  as: s = "div",
  fieldId: m,
  width: t = "100%",
  height: a = 16,
  className: o = "",
  styles: i = {},
  children: n,
  ...x
}) => /* @__PURE__ */ e.jsx(
  s,
  {
    "data-testid": "spacer-field",
    id: m,
    className: o,
    style: {
      width: t,
      height: a,
      ...i
    },
    ...x,
    children: n
  }
), se = (s) => {
  const {
    eventHandlers: m,
    fieldParams: t,
    fieldValue: a = null,
    isTouched: o,
    setValue: i
  } = F(s), n = s.storageFormat || "file", [x, g] = P([]), { htmlHandlers: d, customHandlers: r } = m, p = C(
    async (l) => {
      switch (n) {
        case "file":
          return l;
        case "fileList":
          return [l];
        case "base64":
          return new Promise((u) => {
            const c = new FileReader();
            c.onload = () => u(c.result), c.readAsDataURL(l);
          });
        case "blobUrl":
          return URL.createObjectURL(l);
        case "arrayBuffer":
          return new Promise((u) => {
            const c = new FileReader();
            c.onload = () => u(c.result), c.readAsArrayBuffer(l);
          });
        case "remoteUrl":
          return `https://example.com/uploads/${l.name}`;
        case "metadata":
          return {
            name: l.name,
            type: l.type,
            size: l.size,
            lastModified: l.lastModified
            // Add any custom metadata
          };
        default:
          return l;
      }
    },
    [n]
  ), h = C(
    async (l) => {
      if (!l.target.files || l.target.files.length === 0) return;
      const u = Array.from(l.target.files), c = await Promise.all(u.map(p));
      if (["base64", "blobUrl"].includes(n)) {
        const b = u.map((j) => URL.createObjectURL(j));
        g(b);
      }
      n === "fileList" ? i(s.fieldId, l.target.files) : i(
        s.fieldId,
        c.length === 1 ? c[0] : c
      ), r?.onUpload && r.onUpload(c, s.fieldId);
    },
    [p, n, i, s.fieldId, r]
  ), f = C(
    async (l) => {
      if (!Array.isArray(a)) return;
      const u = a[l], c = a.filter((b, j) => j !== l);
      n === "blobUrl" && typeof u == "string" && URL.revokeObjectURL(u), i(s.fieldId, c.length === 0 ? null : c), g((b) => b.filter((j, w) => w !== l)), r?.onRemove && r.onRemove(u, s.fieldId);
    },
    [a, n, i, s.fieldId, r]
  ), v = T(() => {
    if (s.accept)
      return Array.isArray(s.accept) ? s.accept.join(",") : s.accept;
  }, [s.accept]);
  return /* @__PURE__ */ e.jsxs("div", { className: "file-input-container", children: [
    /* @__PURE__ */ e.jsx(
      "input",
      {
        ...t,
        ...d,
        type: "file",
        onChange: h,
        accept: v,
        multiple: s.multiple,
        "data-touched": o
      }
    ),
    /* @__PURE__ */ e.jsx("div", { className: "file-previews", children: Array.isArray(a) ? a.map((l, u) => /* @__PURE__ */ e.jsxs("div", { className: "file-preview", children: [
      n === "blobUrl" || n === "base64" ? /* @__PURE__ */ e.jsx(
        "img",
        {
          src: x[u] || (typeof l == "string" ? l : ""),
          alt: "Preview"
        }
      ) : /* @__PURE__ */ e.jsx("span", { children: l.name || l }),
      /* @__PURE__ */ e.jsx(
        "button",
        {
          type: "button",
          onClick: () => f(u),
          className: "remove-file",
          children: "Remove"
        }
      )
    ] }, u)) : a ? /* @__PURE__ */ e.jsxs("div", { className: "file-preview", children: [
      n === "blobUrl" || n === "base64" ? /* @__PURE__ */ e.jsx(
        "img",
        {
          src: x[0] || (typeof a == "string" ? a : ""),
          alt: "Preview"
        }
      ) : /* @__PURE__ */ e.jsx("span", { children: a.name || a }),
      /* @__PURE__ */ e.jsx(
        "button",
        {
          type: "button",
          onClick: () => {
            i(s.fieldId, null), g([]), r?.onRemove && r.onRemove(a, s.fieldId);
          },
          className: "remove-file",
          children: "Remove"
        }
      )
    ] }) : null })
  ] });
};
export {
  q as CheckboxField,
  Y as ContainerField,
  _ as DatePickerField,
  X as GridViewField,
  J as GroupField,
  E as InputField,
  se as InputFileField,
  Q as RadioField,
  K as SelectField,
  ee as SpacerField,
  Z as TextareaField
};
//# sourceMappingURL=index-aa7hYACF.js.map
