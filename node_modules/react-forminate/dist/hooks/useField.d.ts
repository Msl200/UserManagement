import { BaseField, ProcessedFieldProps } from '../types';
export declare const useField: <T extends BaseField, E extends HTMLElement = HTMLInputElement>(fieldProps: T) => {
    fieldId: string;
    processedProps: ProcessedFieldProps<T>;
    fieldParams: Partial<Record<string, any>>;
    fieldValue: any;
    values: import('../types').FormValuesType;
    errors: import('../types').FormErrorsType;
    formSchema: import('../types').FormDataCollectionType;
    dynamicOptions: import('../types').FieldDynamicOptionsType;
    eventHandlers: import('../helpers').EventHandlersResult<E>;
    isVisible: boolean;
    isDisable: boolean | NonNullable<T["disabled"] extends import('../types').FieldPropFunction<infer U> ? U : T["disabled"] extends import('../types').FieldPropValue<infer V> ? V : T["disabled"]>;
    observer: import('../helpers').Observer;
    isTouched: boolean;
    hasBeenFocused: boolean;
    setValue: import('../types').SetValueType;
    getFieldSchema: import('../types').GetFieldSchemaType;
    validateForm: import('../types').ValidateFormType;
    validateField: import('../types').ValidateFieldParams;
};
