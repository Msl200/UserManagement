import { FieldPropFunctionReturnParams, FieldPropValue, FormDataCollectionType, FormFieldType, SelectFieldType, SupportedTypes } from '../types';
export declare const fallbackValue: {
    [key: string]: unknown;
};
export declare function isSelectField(field: FormFieldType): field is SelectFieldType;
export declare function getValidJSXProps<K extends keyof HTMLElementTagNameMap>(tagName: K, props: Record<string, any>, excludeKeys?: string[]): Partial<Record<string, any>>;
export declare const getPropValue: <P>(prop: FieldPropValue<P>, functionParams: FieldPropFunctionReturnParams, defaultValue?: P) => P;
export declare const findFieldById: (fieldId: string, fields?: FormFieldType[], values?: Record<string, SupportedTypes>, formSchema?: FormDataCollectionType) => FormFieldType | null;
export declare const findProcessedFieldById: (fieldId: string, fields?: FormFieldType[], values?: Record<string, SupportedTypes>, formSchema?: FormDataCollectionType) => FormFieldType | null;
