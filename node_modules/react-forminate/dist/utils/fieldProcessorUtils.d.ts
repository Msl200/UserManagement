import { FormDataCollectionType, FormFieldType, ProcessedFieldProps, SupportedTypes } from '../types';
export declare class FieldProcessor {
    private static instance;
    private cache;
    private constructor();
    static getInstance(): FieldProcessor;
    process<T extends FormFieldType>(field: T, values: Record<string, SupportedTypes>, formSchema: FormDataCollectionType): ProcessedFieldProps<T>;
    processAllFields(fields: FormFieldType[], values: Record<string, SupportedTypes>, formSchema: FormDataCollectionType): ProcessedFieldProps<FormFieldType>[];
    processField<T extends FormFieldType>(field: T, values: Record<string, SupportedTypes>, formSchema: FormDataCollectionType): ProcessedFieldProps<T>;
    private getCacheKey;
    getFieldDependencies(field: FormFieldType): string[];
    clearCache(): void;
    clearCacheForField(fieldId: string): void;
}
